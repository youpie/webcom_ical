//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "general_properties"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub save_target: String,
    pub webcal_domain: String,
    pub pdf_shift_domain: String,
    pub signin_fail_execution_reduce: i32,
    pub signin_fail_mail_reduce: i32,
    pub execution_interval_minutes: i32,
    pub expected_exectution_time_seconds: i32,
    pub execution_retry_count: i32,
    pub kuma_properties: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    SaveTarget,
    WebcalDomain,
    PdfShiftDomain,
    SigninFailExecutionReduce,
    SigninFailMailReduce,
    ExecutionIntervalMinutes,
    ExpectedExectutionTimeSeconds,
    ExecutionRetryCount,
    KumaProperties,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    KumaProperties,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::SaveTarget => ColumnType::String(StringLen::None).def(),
            Self::WebcalDomain => ColumnType::String(StringLen::None).def(),
            Self::PdfShiftDomain => ColumnType::String(StringLen::None).def(),
            Self::SigninFailExecutionReduce => ColumnType::Integer.def(),
            Self::SigninFailMailReduce => ColumnType::Integer.def(),
            Self::ExecutionIntervalMinutes => ColumnType::Integer.def(),
            Self::ExpectedExectutionTimeSeconds => ColumnType::Integer.def(),
            Self::ExecutionRetryCount => ColumnType::Integer.def(),
            Self::KumaProperties => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::KumaProperties => Entity::belongs_to(super::kuma_properties::Entity)
                .from(Column::KumaProperties)
                .to(super::kuma_properties::Column::Id)
                .into(),
        }
    }
}

impl Related<super::kuma_properties::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KumaProperties.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
