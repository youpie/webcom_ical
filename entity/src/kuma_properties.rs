//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "kuma_properties"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub domain: String,
    pub smtp_server: String,
    pub smtp_username: String,
    pub smtp_password: String,
    pub mail_from: String,
    pub mail_port: i32,
    pub use_ssl: bool,
    pub hearbeat_retry: i32,
    pub offline_mail_resend_hours: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Domain,
    SmtpServer,
    SmtpUsername,
    SmtpPassword,
    MailFrom,
    MailPort,
    UseSsl,
    HearbeatRetry,
    OfflineMailResendHours,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    GeneralProperties,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Domain => ColumnType::String(StringLen::None).def(),
            Self::SmtpServer => ColumnType::String(StringLen::None).def(),
            Self::SmtpUsername => ColumnType::String(StringLen::None).def(),
            Self::SmtpPassword => ColumnType::String(StringLen::None).def(),
            Self::MailFrom => ColumnType::String(StringLen::None).def(),
            Self::MailPort => ColumnType::Integer.def(),
            Self::UseSsl => ColumnType::Boolean.def(),
            Self::HearbeatRetry => ColumnType::Integer.def(),
            Self::OfflineMailResendHours => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::GeneralProperties => Entity::has_many(super::general_properties::Entity).into(),
        }
    }
}

impl Related<super::general_properties::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GeneralProperties.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
